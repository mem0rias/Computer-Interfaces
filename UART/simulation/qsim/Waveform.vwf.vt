// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/11/2022 02:57:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          UART
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UART_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [7:0] Datain;
reg Rst;
reg Send;
reg configmode;
// wires                                               
wire busy;
wire clkout;
wire [6:0] controlLine;
wire [10:0] dtout;
wire out;
wire parity;

// assign statements (if any)                          
UART i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.Datain(Datain),
	.Rst(Rst),
	.Send(Send),
	.busy(busy),
	.clkout(clkout),
	.configmode(configmode),
	.controlLine(controlLine),
	.dtout(dtout),
	.out(out),
	.parity(parity)
);
initial 
begin 
#100000000 $finish;
end 

// Rst
initial
begin
	Rst = 1'b0;
	Rst = #1280000 1'b1;
	Rst = #2560000 1'b0;
end 

// Send
initial
begin
	Send = 1'b0;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #10000 1'b1;
	#10000;
end 
// Datain[ 7 ]
initial
begin
	Datain[7] = 1'b1;
	Datain[7] = #42240000 1'b0;
end 
// Datain[ 6 ]
initial
begin
	Datain[6] = 1'b0;
end 
// Datain[ 5 ]
initial
begin
	Datain[5] = 1'b1;
	Datain[5] = #42240000 1'b0;
end 
// Datain[ 4 ]
initial
begin
	Datain[4] = 1'b0;
end 
// Datain[ 3 ]
initial
begin
	Datain[3] = 1'b1;
	Datain[3] = #42240000 1'b0;
end 
// Datain[ 2 ]
initial
begin
	Datain[2] = 1'b1;
	Datain[2] = #42240000 1'b0;
end 
// Datain[ 1 ]
initial
begin
	Datain[1] = 1'b1;
	Datain[1] = #42240000 1'b0;
end 
// Datain[ 0 ]
initial
begin
	Datain[0] = 1'b1;
	Datain[0] = #42240000 1'b0;
end 

// configmode
initial
begin
	configmode = 1'b0;
end 
endmodule

