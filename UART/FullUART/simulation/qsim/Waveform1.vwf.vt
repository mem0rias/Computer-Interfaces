// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/12/2022 02:20:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PairRXTX
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PairRXTX_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg Conf;
reg [7:0] DPin;
reg Rst;
reg Send;
// wires                                               
wire Busy;
wire [7:0] DPout;
wire Reading;
wire Rxclkout;
wire TenCount;
wire clkout;
wire dsout;

// assign statements (if any)                          
PairRXTX i1 (
// port map - connection between master ports and signals/registers   
	.Busy(Busy),
	.Clk(Clk),
	.Conf(Conf),
	.DPin(DPin),
	.DPout(DPout),
	.Reading(Reading),
	.Rst(Rst),
	.Rxclkout(Rxclkout),
	.Send(Send),
	.TenCount(TenCount),
	.clkout(clkout),
	.dsout(dsout)
);
initial 
begin 
#10000000 $finish;
end 

// Clk
always
begin
	Clk = 1'b0;
	Clk = #500 1'b1;
	#500;
end 

// Send
initial
begin
	Send = 1'b0;
	Send = #3734000 1'b1;
	Send = #2000 1'b0;
	Send = #3048000 1'b1;
	Send = #128000 1'b0;
	Send = #1536000 1'b1;
	Send = #128000 1'b0;
end 

// Conf
initial
begin
	Conf = 1'b0;
end 
// DPin[ 7 ]
initial
begin
	DPin[7] = 1'b0;
	DPin[7] = #2560000 1'b1;
	DPin[7] = #1600000 1'b0;
	DPin[7] = #2368000 1'b1;
end 
// DPin[ 6 ]
initial
begin
	DPin[6] = 1'b0;
end 
// DPin[ 5 ]
initial
begin
	DPin[5] = 1'b0;
	DPin[5] = #2560000 1'b1;
	DPin[5] = #1600000 1'b0;
end 
// DPin[ 4 ]
initial
begin
	DPin[4] = 1'b0;
	DPin[4] = #6528000 1'b1;
end 
// DPin[ 3 ]
initial
begin
	DPin[3] = 1'b0;
	DPin[3] = #2560000 1'b1;
	DPin[3] = #1600000 1'b0;
end 
// DPin[ 2 ]
initial
begin
	DPin[2] = 1'b0;
	DPin[2] = #2560000 1'b1;
	DPin[2] = #1600000 1'b0;
end 
// DPin[ 1 ]
initial
begin
	DPin[1] = 1'b0;
	DPin[1] = #2560000 1'b1;
	DPin[1] = #1600000 1'b0;
end 
// DPin[ 0 ]
initial
begin
	DPin[0] = 1'b0;
	DPin[0] = #2560000 1'b1;
	DPin[0] = #1600000 1'b0;
end 

// Rst
initial
begin
	Rst = 1'b0;
end 
endmodule

