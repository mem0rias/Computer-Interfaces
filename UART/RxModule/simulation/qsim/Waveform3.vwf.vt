// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/12/2022 00:04:29"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RxUart
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RxUart_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg Din;
reg Rst;
reg [2:0] select;
// wires                                               
wire DivClk;
wire Reading;
wire SampleClock;
wire [9:0] dout;

// assign statements (if any)                          
RxUart i1 (
// port map - connection between master ports and signals/registers   
	.Clk(Clk),
	.Din(Din),
	.DivClk(DivClk),
	.Reading(Reading),
	.Rst(Rst),
	.SampleClock(SampleClock),
	.dout(dout),
	.select(select)
);
initial 
begin 
#25000000 $finish;
end 

// Clk
always
begin
	Clk = 1'b0;
	Clk = #5000 1'b1;
	#5000;
end 

// Din
initial
begin
	Din = 1'b1;
	Din = #1000000 1'b0;
	Din = #1000000 1'b1;
	Din = #1040000 1'b0;
	Din = #3040000 1'b1;
end 

// Rst
initial
begin
	Rst = 1'b0;
	Rst = #20000 1'b1;
	Rst = #20000 1'b0;
end 
// select[ 2 ]
initial
begin
	select[2] = 1'b1;
end 
// select[ 1 ]
initial
begin
	select[1] = 1'b1;
end 
// select[ 0 ]
initial
begin
	select[0] = 1'b1;
end 
endmodule

